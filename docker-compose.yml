version: "3.9"

services:
  # n8n Main Instance (Webhook + UI)
  n8n-main:
    image: n8nio/n8n:1.41.0
    container_name: n8n-main
    environment:
      - N8N_QUEUE_MODE=redis
      - N8N_DEFAULT_BINARY_DATA_MODE=s3
      - EXECUTIONS_PROCESS=main
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console
      - N8N_METRICS=true
      # Database
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
      # Redis Queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      # S3 Binary Storage
      - N8N_BINARY_DATA_S3_ENDPOINT=minio:9000
      - N8N_BINARY_DATA_S3_BUCKET=n8n-binaries
      - N8N_BINARY_DATA_S3_ACCESS_KEY_ID=minioadmin
      - N8N_BINARY_DATA_S3_SECRET_ACCESS_KEY=minioadmin
      - N8N_BINARY_DATA_S3_USE_SSL=false
      # Security
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
      - redis
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.example.service=n8n-main"
      - "com.example.environment=development"

  # n8n Workers (4 instances for different queues)
  n8n-worker-default:
    image: n8nio/n8n:1.41.0
    container_name: n8n-worker-default
    command: n8n worker --concurrency=10
    environment:
      - N8N_QUEUE_MODE=redis
      - N8N_DEFAULT_BINARY_DATA_MODE=s3
      - EXECUTIONS_PROCESS=own
      - N8N_LOG_LEVEL=info
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_BINARY_DATA_S3_ENDPOINT=minio:9000
      - N8N_BINARY_DATA_S3_BUCKET=n8n-binaries
      - N8N_BINARY_DATA_S3_ACCESS_KEY_ID=minioadmin
      - N8N_BINARY_DATA_S3_SECRET_ACCESS_KEY=minioadmin
      - N8N_BINARY_DATA_S3_USE_SSL=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - QUEUE_NAME=default
    depends_on:
      - postgres
      - redis
      - minio
    labels:
      - "com.example.service=n8n-worker"
      - "com.example.queue=default"

  n8n-worker-email:
    image: n8nio/n8n:1.41.0
    container_name: n8n-worker-email
    command: n8n worker --concurrency=5
    environment:
      - N8N_QUEUE_MODE=redis
      - N8N_DEFAULT_BINARY_DATA_MODE=s3
      - EXECUTIONS_PROCESS=own
      - N8N_LOG_LEVEL=info
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_BINARY_DATA_S3_ENDPOINT=minio:9000
      - N8N_BINARY_DATA_S3_BUCKET=n8n-binaries
      - N8N_BINARY_DATA_S3_ACCESS_KEY_ID=minioadmin
      - N8N_BINARY_DATA_S3_SECRET_ACCESS_KEY=minioadmin
      - N8N_BINARY_DATA_S3_USE_SSL=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - QUEUE_NAME=email
    depends_on:
      - postgres
      - redis
      - minio
    labels:
      - "com.example.service=n8n-worker"
      - "com.example.queue=email"

  n8n-worker-accounting:
    image: n8nio/n8n:1.41.0
    container_name: n8n-worker-accounting
    command: n8n worker --concurrency=3
    environment:
      - N8N_QUEUE_MODE=redis
      - N8N_DEFAULT_BINARY_DATA_MODE=s3
      - EXECUTIONS_PROCESS=own
      - N8N_LOG_LEVEL=info
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_BINARY_DATA_S3_ENDPOINT=minio:9000
      - N8N_BINARY_DATA_S3_BUCKET=n8n-binaries
      - N8N_BINARY_DATA_S3_ACCESS_KEY_ID=minioadmin
      - N8N_BINARY_DATA_S3_SECRET_ACCESS_KEY=minioadmin
      - N8N_BINARY_DATA_S3_USE_SSL=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - QUEUE_NAME=accounting
    depends_on:
      - postgres
      - redis
      - minio
    labels:
      - "com.example.service=n8n-worker"
      - "com.example.queue=accounting"

  n8n-worker-social:
    image: n8nio/n8n:1.41.0
    container_name: n8n-worker-social
    command: n8n worker --concurrency=2
    environment:
      - N8N_QUEUE_MODE=redis
      - N8N_DEFAULT_BINARY_DATA_MODE=s3
      - EXECUTIONS_PROCESS=own
      - N8N_LOG_LEVEL=info
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_BINARY_DATA_S3_ENDPOINT=minio:9000
      - N8N_BINARY_DATA_S3_BUCKET=n8n-binaries
      - N8N_BINARY_DATA_S3_ACCESS_KEY_ID=minioadmin
      - N8N_BINARY_DATA_S3_SECRET_ACCESS_KEY=minioadmin
      - N8N_BINARY_DATA_S3_USE_SSL=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - QUEUE_NAME=social
    depends_on:
      - postgres
      - redis
      - minio
    labels:
      - "com.example.service=n8n-worker"
      - "com.example.queue=social"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n_user
      - POSTGRES_PASSWORD=n8n_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_user -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.example.service=postgres"

  # Redis (Queue & Cache)
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    labels:
      - "com.example.service=redis"

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:RELEASE.2025-05-18T11-21-00Z
    container_name: n8n-minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "com.example.service=minio"

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: n8n-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - n8n-main
    labels:
      - "com.example.service=prometheus"

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: n8n-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    labels:
      - "com.example.service=grafana"

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: n8n-network
